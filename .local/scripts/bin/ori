#! /usr/bin/env bash

declare model route route_prefix method context prefix dir schema item file

# shellcheck disable=SC2120
die() {
	[ -n "$*" ] && tostderr "$*"
	exit 1
}
tostderr() {
	tput setaf 1 && printf "%s@%s: %s\n" "$0" "${BASH_LINENO[-2]}" "$*" >&2
	tput sgr0
}
assert_installed() { command -v "$1" &>/dev/null || die "$1 is not installed."; }
assert_not_empty() { [ -z "${!1}" ] && die "$1 is empty when it shouldn't be."; }

while getopts "i:m:c:p:f:" o; do
	case "${o}" in
	f)
		file="${OPTARG}"
		;;
	c)
		context="${OPTARG}"
		;;
	m)
		model="${OPTARG}"
		;;
	i)
		item="${OPTARG}"
		;;
	p)
		prefix="${OPTARG}"
		;;
	*)
		die "Invalid opt"
		;;
	esac
done
shift $((OPTIND - 1))

with_prefix() {
	local item="$1"
	local prefix="$2"

	if [ -z "$prefix" ]; then
		echo "$item"
		return
	fi

	echo "$prefix/$item"
}

snake_case() {
	echo "$1" | sed -r 's/([a-z0-9])([A-Z])/\1_\L\2/g' | tr '[:upper:]' '[:lower:]'
}

pascal_case() {
	echo "$1" | sed 's|-|_|g' | sed -r 's/(^|_)([a-z])/\U\2/g'
}

success() {
	printf '\033[42;30m SUCCESS \033[0m %s\n' "$1"
}

info() {
	printf '\033[43;30m INFO \033[0m %s\n' "$1"
}

error() {
	printf '\033[41;30m ERROR \033[0m %s\n' "$1"
}

# EXTRACT INFO FROM FILE
if [ -n "$file" ]; then
	if [ ! -f "$file" ]; then
		die "$file doesn't exist"
	fi

	case "$file" in
		*controller_test*)
			name="$(basename "$file" _controller_test.exs)"
			model="$(pascal_case "${name//-/_}")"
			context="${model}s"
			item="test"
			;;

		*controller*)
			name="$(basename "$file" _controller.ex)"
			model="$(pascal_case "${name//-/_}")"
			context="${model}s"
			item=controller
			;;

		*view*)
			name="$(basename "$file" _view.ex)"
			model="$(pascal_case "${name//-/_}")"
			context="${model}s"
			item=view
			;;

		*)
			case "$item" in
				schema)
					name="$(basename "$file" .ex)"
					model="$(pascal_case "${name//-/_}")"
					context="${model}s"
					item=schema
					;;

				context)
					name="$(basename "$file" .ex)"
					model="$(pascal_case "${name//-/_}")"
					context="${model}s"
					item=context
					;;

				*)
					die "Ambiguous file type, possible options: schema, context"
					;;
			esac
			;;
	esac
fi

# VALIDATION

if [ -z "$model" ]; then
	die "Model: empty"
fi

if [[ ! "$model" =~ ^[a-zA-Z]*$ ]]; then
	die "Model: $model is invalid"
fi

if [ -z "$context" ]; then
	die "Context: empty"
fi

if [[ ! "$context" =~ ^[a-zA-Z]*$ ]]; then
	die "Context: $context is invalid"
fi

# TRANSFORMS
method="${method^^}"

# GENERATION
dir="$(basename "$PWD")"

method="${method^^}"
context="./lib/${dir}/$(snake_case "$model")s/$(snake_case "$context").ex"
schema="./lib/${dir}/$(snake_case "$model")s/$(snake_case "$model").ex"
[ "$route" = "/" ] && route="$route_prefix$route"

# CONTEXT
project_name="$(pascal_case "$(basename "$PWD")")"

schema_name="$(pascal_case "$(basename "$schema" ".ex")")"
context_name="$(pascal_case "$(basename "$context" ".ex")")"

if [ -z "$item" ] || [ "$item" = context ]; then
	cat - <<EOF
defmodule $project_name.$context_name do
	alias $project_name.$schema_name
end
EOF
fi

# SCHEMA
schema_name="$(pascal_case "$(basename "$schema" ".ex")")"
model_name="$(snake_case "$model")"

if [ -z "$item" ] || [ "$item" = schema ]; then
	cat - <<EOF
defmodule $project_name.$schema_name do
	use $project_name.Schema

	@derive {Jason.Encoder, except: [:__meta__]}
	@primary_key {:id, Ecto.UUID, autogenerate: true}
	schema "${model_name}s" do
		timestamps()
	end

	def changeset($model_name, attrs) do
		$model_name
	end
end
EOF
fi

# CONTROLLER
controller_prefix="."
[ -n "$prefix" ] && controller_prefix=".${prefix^^}."
model_name="$(pascal_case "$model")"
context_name="$(pascal_case "$(basename "$context" ".ex")")"

if [ -z "$item" ] || [ "$item" = controller ]; then
	cat - <<EOF
defmodule ${project_name}Web$controller_prefix${model_name}Controller do
	use ${project_name}Web, :controller
	action_fallback ${project_name}Web.FallbackController

	alias $project_name.$context_name
end
EOF
fi

# VIEW
view_prefix="."
[ -n "$prefix" ] && view_prefix=".${prefix^^}."
model_name="$(pascal_case "$model")"
model_name_snake="$(snake_case "$model")"
context_name="$(pascal_case "$(basename "$context" ".ex")")"

if [ -z "$item" ] || [ "$item" = view ]; then
	cat - <<EOF
defmodule ${project_name}Web$view_prefix${model_name}View do
	use ${project_name}Web, :view

	def render("show.json", %{$model_name_snake: $model_name_snake}) do
		%{}
	end

	def render("list.json", %{${model_name_snake}s: ${model_name_snake}s}) do
		render_many(${model_name_snake}s, __MODULE__, "show.json")
	end
end
EOF
fi

# TEST
test_prefix="."
[ -n "$prefix" ] && test_prefix=".${prefix^^}."
model_name="$(pascal_case "$model")"
model_name_snake="$(snake_case "$model")"
context_name="$(pascal_case "$(basename "$context" ".ex")")"

if [ -z "$item" ] || [ "$item" = test ]; then
	cat - <<EOF
defmodule $project_name$test_prefix${model_name}ControllerTest do
	use ${project_name}Web.ConnCase
	import Mock

	alias $project_name.$context_name
end
EOF
fi
